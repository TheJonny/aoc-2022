(defun aoc04_1 ()
  "foo"
  (interactive)
  (setq cnt 0)
  (goto-char (point-min))
  (while (not (eobp))
    
    (let ((l (thing-at-point 'line t)))
      (message "%s" l)
      (let ((s (split-string l "[,-]")))
	(let ((a (string-to-number (car s)))
	      (b (string-to-number (car (cdr s))))
	      (c (string-to-number (car (cdr (cdr s)))))
	      (d (string-to-number (car (cdr (cdr (cdr s)))))))
	  (if (or (and (<= a c) (>= b d)) (and (<= c a) (>= d b)))
	      (setq cnt (+ cnt 1)) ()))))
    (forward-line 1))
  (message "Result: %d" cnt)
  )
(defun aoc04_2 ()
  "foo"
  (interactive)
  (setq cnt 0)
  (goto-char (point-min))
  (while (not (eobp))
    
    (let ((l (thing-at-point 'line t)))
      (message "%s" l)
      (let ((s (split-string l "[,-]")))
	(let ((a (string-to-number (car s)))
	      (b (string-to-number (car (cdr s))))
	      (c (string-to-number (car (cdr (cdr s)))))
	      (d (string-to-number (car (cdr (cdr (cdr s)))))))
	  (if (or (and (<= a c) (<= c b)) (and (<= a d) (<= d b)) (and (<= c a) (<= a d)))
	      (setq cnt (+ cnt 1)) ()))))
    (forward-line 1))
  (message "Result: %d" cnt)
)
